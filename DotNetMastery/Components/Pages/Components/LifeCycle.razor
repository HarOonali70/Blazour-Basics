@page "/lifeCycle"
@using System.Threading
<h3>LifeCycle</h3>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
<br />

@count <button class="btn btn-primary" @onclick="StartCountDown">Click me</button>
@* <div class="border">
    <_LifeCycleChild Counter="currentCount"></_LifeCycleChild>
</div> *@
@foreach (var x in EventType)
{
    <p>@x</p>
    <hr />
}

@code {
    private int currentCount = 0;
    private int count = 5;

    private void IncrementCount()
    {
        currentCount++;
    }
    List<string> EventType = new List<string>();
    protected override async Task OnInitializedAsync() //render when the ui is rendering
    {
        EventType.Add("OnInitializedAsync parent is called");
    }
    protected override void OnInitialized() 
    {
        EventType.Add("OnInitialized parent is called");
    }
    protected override void OnParametersSet()//render when the child ui is change
    {
        EventType.Add("OnParametersSet parent is called");
    }
    protected override async Task OnParametersSetAsync() 
    {
        EventType.Add("OnParametersSetAsync parent is called");
    }
    protected override void OnAfterRender(bool firstRender) // render when the whole ui is executed
    {
        if (firstRender)
        {
            currentCount = 100;
        }
        else
        {
            currentCount = 200;
        }
    }
    protected override bool ShouldRender() // responsible to refresh the whole UI
    {
        EventType.Add("ShouldRender parent is called");
        return false;
    }

    void StartCountDown() //this state is used to go to ShouldRender state and after that refresh the UI
    {
        var timer = new Timer(TimeCallBack,null,1000,1000);
    }

    void TimeCallBack(object obj)
    {
        if (count > 0)
        {
            count--;    
        }    
    }

}
